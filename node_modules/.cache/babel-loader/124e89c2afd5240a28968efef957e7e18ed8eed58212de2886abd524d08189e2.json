{"ast":null,"code":"var _s = $RefreshSig$();\nimport { createSlice } from 'utils/@reduxjs/toolkit';\nimport { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\nimport { githubRepoFormSaga } from './saga';\nexport const initialState = {\n  username: 'react-boilerplate',\n  repositories: [],\n  loading: false,\n  error: null\n};\nconst slice = createSlice({\n  name: 'githubRepoForm',\n  initialState,\n  reducers: {\n    changeUsername(state, action) {\n      state.username = action.payload;\n    },\n    loadRepos(state) {\n      state.loading = true;\n      state.error = null;\n      state.repositories = [];\n    },\n    reposLoaded(state, action) {\n      const repos = action.payload;\n      state.repositories = repos;\n      state.loading = false;\n    },\n    repoError(state, action) {\n      state.error = action.payload;\n      state.loading = false;\n    }\n  }\n});\nexport const {\n  actions: githubRepoFormActions,\n  reducer\n} = slice;\nexport const useGithubRepoFormSlice = () => {\n  _s();\n  useInjectReducer({\n    key: slice.name,\n    reducer: slice.reducer\n  });\n  useInjectSaga({\n    key: slice.name,\n    saga: githubRepoFormSaga\n  });\n  return {\n    actions: slice.actions\n  };\n};\n_s(useGithubRepoFormSlice, \"ykJhATORHQGnaADRAJfvIx+/J2s=\", false, function () {\n  return [useInjectReducer, useInjectSaga];\n});","map":{"version":3,"names":["createSlice","useInjectReducer","useInjectSaga","githubRepoFormSaga","initialState","username","repositories","loading","error","slice","name","reducers","changeUsername","state","action","payload","loadRepos","reposLoaded","repos","repoError","actions","githubRepoFormActions","reducer","useGithubRepoFormSlice","key","saga"],"sources":["/Users/jeonsohee/Desktop/todo/src/app/pages/HomePage/Features/GithubRepoForm/slice/index.ts"],"sourcesContent":["import { PayloadAction } from '@reduxjs/toolkit';\nimport { Repo } from 'types/Repo';\nimport { createSlice } from 'utils/@reduxjs/toolkit';\nimport { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\nimport { githubRepoFormSaga } from './saga';\nimport { GithubRepoFormState, RepoErrorType } from './types';\n\nexport const initialState: GithubRepoFormState = {\n  username: 'react-boilerplate',\n  repositories: [],\n  loading: false,\n  error: null,\n};\n\nconst slice = createSlice({\n  name: 'githubRepoForm',\n  initialState,\n  reducers: {\n    changeUsername(state, action: PayloadAction<string>) {\n      state.username = action.payload;\n    },\n    loadRepos(state) {\n      state.loading = true;\n      state.error = null;\n      state.repositories = [];\n    },\n    reposLoaded(state, action: PayloadAction<Repo[]>) {\n      const repos = action.payload;\n      state.repositories = repos;\n      state.loading = false;\n    },\n    repoError(state, action: PayloadAction<RepoErrorType>) {\n      state.error = action.payload;\n      state.loading = false;\n    },\n  },\n});\n\nexport const { actions: githubRepoFormActions, reducer } = slice;\n\nexport const useGithubRepoFormSlice = () => {\n  useInjectReducer({ key: slice.name, reducer: slice.reducer });\n  useInjectSaga({ key: slice.name, saga: githubRepoFormSaga });\n  return { actions: slice.actions };\n};\n"],"mappings":";AAEA,SAASA,WAAW,QAAQ,wBAAwB;AACpD,SAASC,gBAAgB,EAAEC,aAAa,QAAQ,uBAAuB;AACvE,SAASC,kBAAkB,QAAQ,QAAQ;AAG3C,OAAO,MAAMC,YAAiC,GAAG;EAC/CC,QAAQ,EAAE,mBAAmB;EAC7BC,YAAY,EAAE,EAAE;EAChBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,KAAK,GAAGT,WAAW,CAAC;EACxBU,IAAI,EAAE,gBAAgB;EACtBN,YAAY;EACZO,QAAQ,EAAE;IACRC,cAAc,CAACC,KAAK,EAAEC,MAA6B,EAAE;MACnDD,KAAK,CAACR,QAAQ,GAAGS,MAAM,CAACC,OAAO;IACjC,CAAC;IACDC,SAAS,CAACH,KAAK,EAAE;MACfA,KAAK,CAACN,OAAO,GAAG,IAAI;MACpBM,KAAK,CAACL,KAAK,GAAG,IAAI;MAClBK,KAAK,CAACP,YAAY,GAAG,EAAE;IACzB,CAAC;IACDW,WAAW,CAACJ,KAAK,EAAEC,MAA6B,EAAE;MAChD,MAAMI,KAAK,GAAGJ,MAAM,CAACC,OAAO;MAC5BF,KAAK,CAACP,YAAY,GAAGY,KAAK;MAC1BL,KAAK,CAACN,OAAO,GAAG,KAAK;IACvB,CAAC;IACDY,SAAS,CAACN,KAAK,EAAEC,MAAoC,EAAE;MACrDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;MAC5BF,KAAK,CAACN,OAAO,GAAG,KAAK;IACvB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEa,OAAO,EAAEC,qBAAqB;EAAEC;AAAQ,CAAC,GAAGb,KAAK;AAEhE,OAAO,MAAMc,sBAAsB,GAAG,MAAM;EAAA;EAC1CtB,gBAAgB,CAAC;IAAEuB,GAAG,EAAEf,KAAK,CAACC,IAAI;IAAEY,OAAO,EAAEb,KAAK,CAACa;EAAQ,CAAC,CAAC;EAC7DpB,aAAa,CAAC;IAAEsB,GAAG,EAAEf,KAAK,CAACC,IAAI;IAAEe,IAAI,EAAEtB;EAAmB,CAAC,CAAC;EAC5D,OAAO;IAAEiB,OAAO,EAAEX,KAAK,CAACW;EAAQ,CAAC;AACnC,CAAC;AAAC,GAJWG,sBAAsB;EAAA,QACjCtB,gBAAgB,EAChBC,aAAa;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}