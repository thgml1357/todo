{"ast":null,"code":"/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from \"@reduxjs/toolkit\";\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport function createReducer() {\n  let injectedReducers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  // Initially we don't have any injectedReducers, so returning identity function to avoid the error\n  if (Object.keys(injectedReducers).length === 0) {\n    return state => state;\n  } else {\n    return combineReducers({\n      ...injectedReducers\n    });\n  }\n}","map":{"version":3,"names":["combineReducers","createReducer","injectedReducers","Object","keys","length","state"],"sources":["/Users/jeonsohee/Desktop/todo/src/store/reducers.ts"],"sourcesContent":["/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers } from \"@reduxjs/toolkit\";\n\nimport { InjectedReducersType } from \"utils/types/injector-typings\";\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport function createReducer(injectedReducers: InjectedReducersType = {}) {\n  // Initially we don't have any injectedReducers, so returning identity function to avoid the error\n  if (Object.keys(injectedReducers).length === 0) {\n    return (state) => state;\n  } else {\n    return combineReducers({\n      ...injectedReducers,\n    });\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;;AAEA,SAASA,eAAe,QAAQ,kBAAkB;AAIlD;AACA;AACA;AACA,OAAO,SAASC,aAAa,GAA8C;EAAA,IAA7CC,gBAAsC,uEAAG,CAAC,CAAC;EACvE;EACA,IAAIC,MAAM,CAACC,IAAI,CAACF,gBAAgB,CAAC,CAACG,MAAM,KAAK,CAAC,EAAE;IAC9C,OAAQC,KAAK,IAAKA,KAAK;EACzB,CAAC,MAAM;IACL,OAAON,eAAe,CAAC;MACrB,GAAGE;IACL,CAAC,CAAC;EACJ;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}