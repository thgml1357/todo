{"ast":null,"code":"export class ResponseError extends Error {\n  constructor(response) {\n    super(response.statusText);\n    this.response = void 0;\n    this.response = response;\n  }\n}\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new ResponseError(response);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport async function request(url, options) {\n  const fetchResponse = await fetch(url, options);\n  const response = checkStatus(fetchResponse);\n  return parseJSON(response);\n}","map":{"version":3,"names":["ResponseError","Error","constructor","response","statusText","parseJSON","status","json","checkStatus","error","request","url","options","fetchResponse","fetch"],"sources":["/Users/jeonsohee/Desktop/todo/src/utils/request.ts"],"sourcesContent":["export class ResponseError extends Error {\n  public response: Response;\n\n  constructor(response: Response) {\n    super(response.statusText);\n    this.response = response;\n  }\n}\n/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response: Response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response: Response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n  const error = new ResponseError(response);\n  error.response = response;\n  throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport async function request(\n  url: string,\n  options?: RequestInit,\n): Promise<{} | { err: ResponseError }> {\n  const fetchResponse = await fetch(url, options);\n  const response = checkStatus(fetchResponse);\n  return parseJSON(response);\n}\n"],"mappings":"AAAA,OAAO,MAAMA,aAAa,SAASC,KAAK,CAAC;EAGvCC,WAAW,CAACC,QAAkB,EAAE;IAC9B,KAAK,CAACA,QAAQ,CAACC,UAAU,CAAC;IAAC,KAHtBD,QAAQ;IAIb,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,SAAS,CAACF,QAAkB,EAAE;EACrC,IAAIA,QAAQ,CAACG,MAAM,KAAK,GAAG,IAAIH,QAAQ,CAACG,MAAM,KAAK,GAAG,EAAE;IACtD,OAAO,IAAI;EACb;EACA,OAAOH,QAAQ,CAACI,IAAI,EAAE;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAW,CAACL,QAAkB,EAAE;EACvC,IAAIA,QAAQ,CAACG,MAAM,IAAI,GAAG,IAAIH,QAAQ,CAACG,MAAM,GAAG,GAAG,EAAE;IACnD,OAAOH,QAAQ;EACjB;EACA,MAAMM,KAAK,GAAG,IAAIT,aAAa,CAACG,QAAQ,CAAC;EACzCM,KAAK,CAACN,QAAQ,GAAGA,QAAQ;EACzB,MAAMM,KAAK;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,OAAO,CAC3BC,GAAW,EACXC,OAAqB,EACiB;EACtC,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAACH,GAAG,EAAEC,OAAO,CAAC;EAC/C,MAAMT,QAAQ,GAAGK,WAAW,CAACK,aAAa,CAAC;EAC3C,OAAOR,SAAS,CAACF,QAAQ,CAAC;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}